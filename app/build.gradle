apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "eu.sisik.nodeexample"
        minSdkVersion 19
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang",
                          "-DANDROID_STL=c++_shared",
                          "-DANDROID_PLATFORM=android-19"
                cppFlags "-std=c++11"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    // No need to add node's include header to final apk
    applicationVariants.all { variant ->
        variant.mergeAssets.doLast {
            delete "build/intermediates/assets/${variant.baseName}/include"
            println ">>>>>>Deleting = build/intermediates/assets/${variant.baseName}/include";
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'eu.sisik:nodelib:0.3'
    testCompile 'junit:junit:4.12'
}


// Get libnode.so shared library and include header files from the aar
// downloaded from my maven repo
project.afterEvaluate {
    preBuild.dependsOn(copyDepFiles)
}

task copyDepFiles {
    doFirst() {
        configurations.compile.each {
            if (it.name.contains("nodelib")) {
                def aarPath = it.absolutePath

                // Copy libnode.so
                copy {
                    from zipTree(aarPath)
                    into "src/main"
                    include "jni/**"
                }
                ant.move(file: "src/main/jni", tofile: "src/main/jniLibs")

                // Copy node's include headers
                copy {
                    from zipTree(aarPath)
                    into "src/main/include"
                    include "assets/include/**"
                }
                ant.move(file: "src/main/include/assets/include", tofile: "src/main/include")
                delete "src/main/include/assets"
            }
        }
    }
}

